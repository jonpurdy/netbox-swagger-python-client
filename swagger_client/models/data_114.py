# coding: utf-8

"""
    NetBox API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data114(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'description': 'str',
        'ipaddresses': 'list[str]',
        'device': 'str',
        'port': 'int',
        'name': 'str'
    }

    attribute_map = {
        'protocol': 'protocol',
        'description': 'description',
        'ipaddresses': 'ipaddresses',
        'device': 'device',
        'port': 'port',
        'name': 'name'
    }

    def __init__(self, protocol=None, description=None, ipaddresses=None, device=None, port=None, name=None):
        """
        Data114 - a model defined in Swagger
        """

        self._protocol = None
        self._description = None
        self._ipaddresses = None
        self._device = None
        self._port = None
        self._name = None

        self.protocol = protocol
        if description is not None:
          self.description = description
        if ipaddresses is not None:
          self.ipaddresses = ipaddresses
        self.device = device
        self.port = port
        self.name = name

    @property
    def protocol(self):
        """
        Gets the protocol of this Data114.
        

        :return: The protocol of this Data114.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this Data114.
        

        :param protocol: The protocol of this Data114.
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def description(self):
        """
        Gets the description of this Data114.
        

        :return: The description of this Data114.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Data114.
        

        :param description: The description of this Data114.
        :type: str
        """

        self._description = description

    @property
    def ipaddresses(self):
        """
        Gets the ipaddresses of this Data114.
        

        :return: The ipaddresses of this Data114.
        :rtype: list[str]
        """
        return self._ipaddresses

    @ipaddresses.setter
    def ipaddresses(self, ipaddresses):
        """
        Sets the ipaddresses of this Data114.
        

        :param ipaddresses: The ipaddresses of this Data114.
        :type: list[str]
        """

        self._ipaddresses = ipaddresses

    @property
    def device(self):
        """
        Gets the device of this Data114.
        

        :return: The device of this Data114.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this Data114.
        

        :param device: The device of this Data114.
        :type: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def port(self):
        """
        Gets the port of this Data114.
        

        :return: The port of this Data114.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this Data114.
        

        :param port: The port of this Data114.
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def name(self):
        """
        Gets the name of this Data114.
        

        :return: The name of this Data114.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Data114.
        

        :param name: The name of this Data114.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data114):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
