# coding: utf-8

"""
    NetBox API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data6(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'commit_rate': 'int',
        'cid': 'str',
        'install_date': 'str',
        'comments': 'str',
        'custom_fields': 'str',
        'provider': 'str',
        'type': 'str',
        'tenant': 'str'
    }

    attribute_map = {
        'description': 'description',
        'commit_rate': 'commit_rate',
        'cid': 'cid',
        'install_date': 'install_date',
        'comments': 'comments',
        'custom_fields': 'custom_fields',
        'provider': 'provider',
        'type': 'type',
        'tenant': 'tenant'
    }

    def __init__(self, description=None, commit_rate=None, cid=None, install_date=None, comments=None, custom_fields=None, provider=None, type=None, tenant=None):
        """
        Data6 - a model defined in Swagger
        """

        self._description = None
        self._commit_rate = None
        self._cid = None
        self._install_date = None
        self._comments = None
        self._custom_fields = None
        self._provider = None
        self._type = None
        self._tenant = None

        if description is not None:
          self.description = description
        if commit_rate is not None:
          self.commit_rate = commit_rate
        self.cid = cid
        if install_date is not None:
          self.install_date = install_date
        if comments is not None:
          self.comments = comments
        if custom_fields is not None:
          self.custom_fields = custom_fields
        self.provider = provider
        self.type = type
        if tenant is not None:
          self.tenant = tenant

    @property
    def description(self):
        """
        Gets the description of this Data6.
        

        :return: The description of this Data6.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Data6.
        

        :param description: The description of this Data6.
        :type: str
        """

        self._description = description

    @property
    def commit_rate(self):
        """
        Gets the commit_rate of this Data6.
        

        :return: The commit_rate of this Data6.
        :rtype: int
        """
        return self._commit_rate

    @commit_rate.setter
    def commit_rate(self, commit_rate):
        """
        Sets the commit_rate of this Data6.
        

        :param commit_rate: The commit_rate of this Data6.
        :type: int
        """

        self._commit_rate = commit_rate

    @property
    def cid(self):
        """
        Gets the cid of this Data6.
        

        :return: The cid of this Data6.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """
        Sets the cid of this Data6.
        

        :param cid: The cid of this Data6.
        :type: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")

        self._cid = cid

    @property
    def install_date(self):
        """
        Gets the install_date of this Data6.
        

        :return: The install_date of this Data6.
        :rtype: str
        """
        return self._install_date

    @install_date.setter
    def install_date(self, install_date):
        """
        Sets the install_date of this Data6.
        

        :param install_date: The install_date of this Data6.
        :type: str
        """

        self._install_date = install_date

    @property
    def comments(self):
        """
        Gets the comments of this Data6.
        

        :return: The comments of this Data6.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this Data6.
        

        :param comments: The comments of this Data6.
        :type: str
        """

        self._comments = comments

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Data6.
        

        :return: The custom_fields of this Data6.
        :rtype: str
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Data6.
        

        :param custom_fields: The custom_fields of this Data6.
        :type: str
        """

        self._custom_fields = custom_fields

    @property
    def provider(self):
        """
        Gets the provider of this Data6.
        

        :return: The provider of this Data6.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this Data6.
        

        :param provider: The provider of this Data6.
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def type(self):
        """
        Gets the type of this Data6.
        

        :return: The type of this Data6.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Data6.
        

        :param type: The type of this Data6.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def tenant(self):
        """
        Gets the tenant of this Data6.
        

        :return: The tenant of this Data6.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this Data6.
        

        :param tenant: The tenant of this Data6.
        :type: str
        """

        self._tenant = tenant

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data6):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
