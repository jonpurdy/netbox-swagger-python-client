# coding: utf-8

"""
    NetBox API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data9(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'name': 'str',
        'noc_contact': 'str',
        'portal_url': 'str',
        'slug': 'str',
        'admin_contact': 'str',
        'comments': 'str',
        'asn': 'int',
        'custom_fields': 'str'
    }

    attribute_map = {
        'account': 'account',
        'name': 'name',
        'noc_contact': 'noc_contact',
        'portal_url': 'portal_url',
        'slug': 'slug',
        'admin_contact': 'admin_contact',
        'comments': 'comments',
        'asn': 'asn',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, account=None, name=None, noc_contact=None, portal_url=None, slug=None, admin_contact=None, comments=None, asn=None, custom_fields=None):
        """
        Data9 - a model defined in Swagger
        """

        self._account = None
        self._name = None
        self._noc_contact = None
        self._portal_url = None
        self._slug = None
        self._admin_contact = None
        self._comments = None
        self._asn = None
        self._custom_fields = None

        if account is not None:
          self.account = account
        self.name = name
        if noc_contact is not None:
          self.noc_contact = noc_contact
        if portal_url is not None:
          self.portal_url = portal_url
        self.slug = slug
        if admin_contact is not None:
          self.admin_contact = admin_contact
        if comments is not None:
          self.comments = comments
        if asn is not None:
          self.asn = asn
        if custom_fields is not None:
          self.custom_fields = custom_fields

    @property
    def account(self):
        """
        Gets the account of this Data9.
        

        :return: The account of this Data9.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this Data9.
        

        :param account: The account of this Data9.
        :type: str
        """

        self._account = account

    @property
    def name(self):
        """
        Gets the name of this Data9.
        

        :return: The name of this Data9.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Data9.
        

        :param name: The name of this Data9.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def noc_contact(self):
        """
        Gets the noc_contact of this Data9.
        

        :return: The noc_contact of this Data9.
        :rtype: str
        """
        return self._noc_contact

    @noc_contact.setter
    def noc_contact(self, noc_contact):
        """
        Sets the noc_contact of this Data9.
        

        :param noc_contact: The noc_contact of this Data9.
        :type: str
        """

        self._noc_contact = noc_contact

    @property
    def portal_url(self):
        """
        Gets the portal_url of this Data9.
        

        :return: The portal_url of this Data9.
        :rtype: str
        """
        return self._portal_url

    @portal_url.setter
    def portal_url(self, portal_url):
        """
        Sets the portal_url of this Data9.
        

        :param portal_url: The portal_url of this Data9.
        :type: str
        """

        self._portal_url = portal_url

    @property
    def slug(self):
        """
        Gets the slug of this Data9.
        

        :return: The slug of this Data9.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this Data9.
        

        :param slug: The slug of this Data9.
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def admin_contact(self):
        """
        Gets the admin_contact of this Data9.
        

        :return: The admin_contact of this Data9.
        :rtype: str
        """
        return self._admin_contact

    @admin_contact.setter
    def admin_contact(self, admin_contact):
        """
        Sets the admin_contact of this Data9.
        

        :param admin_contact: The admin_contact of this Data9.
        :type: str
        """

        self._admin_contact = admin_contact

    @property
    def comments(self):
        """
        Gets the comments of this Data9.
        

        :return: The comments of this Data9.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this Data9.
        

        :param comments: The comments of this Data9.
        :type: str
        """

        self._comments = comments

    @property
    def asn(self):
        """
        Gets the asn of this Data9.
        

        :return: The asn of this Data9.
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """
        Sets the asn of this Data9.
        

        :param asn: The asn of this Data9.
        :type: int
        """

        self._asn = asn

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Data9.
        

        :return: The custom_fields of this Data9.
        :rtype: str
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Data9.
        

        :param custom_fields: The custom_fields of this Data9.
        :type: str
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data9):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
