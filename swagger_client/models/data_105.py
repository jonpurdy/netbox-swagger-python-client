# coding: utf-8

"""
    NetBox API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data105(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'description': 'str',
        'is_pool': 'bool',
        'vlan': 'str',
        'site': 'str',
        'custom_fields': 'str',
        'prefix': 'str',
        'role': 'str',
        'vrf': 'str',
        'tenant': 'str'
    }

    attribute_map = {
        'status': 'status',
        'description': 'description',
        'is_pool': 'is_pool',
        'vlan': 'vlan',
        'site': 'site',
        'custom_fields': 'custom_fields',
        'prefix': 'prefix',
        'role': 'role',
        'vrf': 'vrf',
        'tenant': 'tenant'
    }

    def __init__(self, status=None, description=None, is_pool=None, vlan=None, site=None, custom_fields=None, prefix=None, role=None, vrf=None, tenant=None):
        """
        Data105 - a model defined in Swagger
        """

        self._status = None
        self._description = None
        self._is_pool = None
        self._vlan = None
        self._site = None
        self._custom_fields = None
        self._prefix = None
        self._role = None
        self._vrf = None
        self._tenant = None

        if status is not None:
          self.status = status
        if description is not None:
          self.description = description
        if is_pool is not None:
          self.is_pool = is_pool
        if vlan is not None:
          self.vlan = vlan
        if site is not None:
          self.site = site
        if custom_fields is not None:
          self.custom_fields = custom_fields
        self.prefix = prefix
        if role is not None:
          self.role = role
        if vrf is not None:
          self.vrf = vrf
        if tenant is not None:
          self.tenant = tenant

    @property
    def status(self):
        """
        Gets the status of this Data105.
        Operational status of this prefix

        :return: The status of this Data105.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Data105.
        Operational status of this prefix

        :param status: The status of this Data105.
        :type: str
        """

        self._status = status

    @property
    def description(self):
        """
        Gets the description of this Data105.
        

        :return: The description of this Data105.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Data105.
        

        :param description: The description of this Data105.
        :type: str
        """

        self._description = description

    @property
    def is_pool(self):
        """
        Gets the is_pool of this Data105.
        All IP addresses within this prefix are considered usable

        :return: The is_pool of this Data105.
        :rtype: bool
        """
        return self._is_pool

    @is_pool.setter
    def is_pool(self, is_pool):
        """
        Sets the is_pool of this Data105.
        All IP addresses within this prefix are considered usable

        :param is_pool: The is_pool of this Data105.
        :type: bool
        """

        self._is_pool = is_pool

    @property
    def vlan(self):
        """
        Gets the vlan of this Data105.
        

        :return: The vlan of this Data105.
        :rtype: str
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """
        Sets the vlan of this Data105.
        

        :param vlan: The vlan of this Data105.
        :type: str
        """

        self._vlan = vlan

    @property
    def site(self):
        """
        Gets the site of this Data105.
        

        :return: The site of this Data105.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """
        Sets the site of this Data105.
        

        :param site: The site of this Data105.
        :type: str
        """

        self._site = site

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Data105.
        

        :return: The custom_fields of this Data105.
        :rtype: str
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Data105.
        

        :param custom_fields: The custom_fields of this Data105.
        :type: str
        """

        self._custom_fields = custom_fields

    @property
    def prefix(self):
        """
        Gets the prefix of this Data105.
        IPv4 or IPv6 network with mask

        :return: The prefix of this Data105.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this Data105.
        IPv4 or IPv6 network with mask

        :param prefix: The prefix of this Data105.
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix

    @property
    def role(self):
        """
        Gets the role of this Data105.
        The primary function of this prefix

        :return: The role of this Data105.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this Data105.
        The primary function of this prefix

        :param role: The role of this Data105.
        :type: str
        """

        self._role = role

    @property
    def vrf(self):
        """
        Gets the vrf of this Data105.
        

        :return: The vrf of this Data105.
        :rtype: str
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """
        Sets the vrf of this Data105.
        

        :param vrf: The vrf of this Data105.
        :type: str
        """

        self._vrf = vrf

    @property
    def tenant(self):
        """
        Gets the tenant of this Data105.
        

        :return: The tenant of this Data105.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this Data105.
        

        :param tenant: The tenant of this Data105.
        :type: str
        """

        self._tenant = tenant

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data105):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
