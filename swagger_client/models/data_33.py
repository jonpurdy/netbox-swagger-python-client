# coding: utf-8

"""
    NetBox API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data33(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'u_height': 'int',
        'is_pdu': 'bool',
        'is_full_depth': 'bool',
        'subdevice_role': 'str',
        'is_console_server': 'bool',
        'comments': 'str',
        'is_network_device': 'bool',
        'part_number': 'str',
        'interface_ordering': 'str',
        'model': 'str',
        'slug': 'str',
        'custom_fields': 'str',
        'manufacturer': 'str'
    }

    attribute_map = {
        'u_height': 'u_height',
        'is_pdu': 'is_pdu',
        'is_full_depth': 'is_full_depth',
        'subdevice_role': 'subdevice_role',
        'is_console_server': 'is_console_server',
        'comments': 'comments',
        'is_network_device': 'is_network_device',
        'part_number': 'part_number',
        'interface_ordering': 'interface_ordering',
        'model': 'model',
        'slug': 'slug',
        'custom_fields': 'custom_fields',
        'manufacturer': 'manufacturer'
    }

    def __init__(self, u_height=None, is_pdu=None, is_full_depth=None, subdevice_role=None, is_console_server=None, comments=None, is_network_device=None, part_number=None, interface_ordering=None, model=None, slug=None, custom_fields=None, manufacturer=None):
        """
        Data33 - a model defined in Swagger
        """

        self._u_height = None
        self._is_pdu = None
        self._is_full_depth = None
        self._subdevice_role = None
        self._is_console_server = None
        self._comments = None
        self._is_network_device = None
        self._part_number = None
        self._interface_ordering = None
        self._model = None
        self._slug = None
        self._custom_fields = None
        self._manufacturer = None

        if u_height is not None:
          self.u_height = u_height
        if is_pdu is not None:
          self.is_pdu = is_pdu
        if is_full_depth is not None:
          self.is_full_depth = is_full_depth
        if subdevice_role is not None:
          self.subdevice_role = subdevice_role
        if is_console_server is not None:
          self.is_console_server = is_console_server
        if comments is not None:
          self.comments = comments
        if is_network_device is not None:
          self.is_network_device = is_network_device
        if part_number is not None:
          self.part_number = part_number
        if interface_ordering is not None:
          self.interface_ordering = interface_ordering
        self.model = model
        self.slug = slug
        if custom_fields is not None:
          self.custom_fields = custom_fields
        self.manufacturer = manufacturer

    @property
    def u_height(self):
        """
        Gets the u_height of this Data33.
        

        :return: The u_height of this Data33.
        :rtype: int
        """
        return self._u_height

    @u_height.setter
    def u_height(self, u_height):
        """
        Sets the u_height of this Data33.
        

        :param u_height: The u_height of this Data33.
        :type: int
        """

        self._u_height = u_height

    @property
    def is_pdu(self):
        """
        Gets the is_pdu of this Data33.
        This type of device has power outlets

        :return: The is_pdu of this Data33.
        :rtype: bool
        """
        return self._is_pdu

    @is_pdu.setter
    def is_pdu(self, is_pdu):
        """
        Sets the is_pdu of this Data33.
        This type of device has power outlets

        :param is_pdu: The is_pdu of this Data33.
        :type: bool
        """

        self._is_pdu = is_pdu

    @property
    def is_full_depth(self):
        """
        Gets the is_full_depth of this Data33.
        Device consumes both front and rear rack faces

        :return: The is_full_depth of this Data33.
        :rtype: bool
        """
        return self._is_full_depth

    @is_full_depth.setter
    def is_full_depth(self, is_full_depth):
        """
        Sets the is_full_depth of this Data33.
        Device consumes both front and rear rack faces

        :param is_full_depth: The is_full_depth of this Data33.
        :type: bool
        """

        self._is_full_depth = is_full_depth

    @property
    def subdevice_role(self):
        """
        Gets the subdevice_role of this Data33.
        Parent devices house child devices in device bays. Select \"None\" if this device type is neither a parent nor a child.

        :return: The subdevice_role of this Data33.
        :rtype: str
        """
        return self._subdevice_role

    @subdevice_role.setter
    def subdevice_role(self, subdevice_role):
        """
        Sets the subdevice_role of this Data33.
        Parent devices house child devices in device bays. Select \"None\" if this device type is neither a parent nor a child.

        :param subdevice_role: The subdevice_role of this Data33.
        :type: str
        """

        self._subdevice_role = subdevice_role

    @property
    def is_console_server(self):
        """
        Gets the is_console_server of this Data33.
        This type of device has console server ports

        :return: The is_console_server of this Data33.
        :rtype: bool
        """
        return self._is_console_server

    @is_console_server.setter
    def is_console_server(self, is_console_server):
        """
        Sets the is_console_server of this Data33.
        This type of device has console server ports

        :param is_console_server: The is_console_server of this Data33.
        :type: bool
        """

        self._is_console_server = is_console_server

    @property
    def comments(self):
        """
        Gets the comments of this Data33.
        

        :return: The comments of this Data33.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this Data33.
        

        :param comments: The comments of this Data33.
        :type: str
        """

        self._comments = comments

    @property
    def is_network_device(self):
        """
        Gets the is_network_device of this Data33.
        This type of device has network interfaces

        :return: The is_network_device of this Data33.
        :rtype: bool
        """
        return self._is_network_device

    @is_network_device.setter
    def is_network_device(self, is_network_device):
        """
        Sets the is_network_device of this Data33.
        This type of device has network interfaces

        :param is_network_device: The is_network_device of this Data33.
        :type: bool
        """

        self._is_network_device = is_network_device

    @property
    def part_number(self):
        """
        Gets the part_number of this Data33.
        Discrete part number (optional)

        :return: The part_number of this Data33.
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """
        Sets the part_number of this Data33.
        Discrete part number (optional)

        :param part_number: The part_number of this Data33.
        :type: str
        """

        self._part_number = part_number

    @property
    def interface_ordering(self):
        """
        Gets the interface_ordering of this Data33.
        

        :return: The interface_ordering of this Data33.
        :rtype: str
        """
        return self._interface_ordering

    @interface_ordering.setter
    def interface_ordering(self, interface_ordering):
        """
        Sets the interface_ordering of this Data33.
        

        :param interface_ordering: The interface_ordering of this Data33.
        :type: str
        """

        self._interface_ordering = interface_ordering

    @property
    def model(self):
        """
        Gets the model of this Data33.
        

        :return: The model of this Data33.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this Data33.
        

        :param model: The model of this Data33.
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def slug(self):
        """
        Gets the slug of this Data33.
        

        :return: The slug of this Data33.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this Data33.
        

        :param slug: The slug of this Data33.
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Data33.
        

        :return: The custom_fields of this Data33.
        :rtype: str
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Data33.
        

        :param custom_fields: The custom_fields of this Data33.
        :type: str
        """

        self._custom_fields = custom_fields

    @property
    def manufacturer(self):
        """
        Gets the manufacturer of this Data33.
        

        :return: The manufacturer of this Data33.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """
        Sets the manufacturer of this Data33.
        

        :param manufacturer: The manufacturer of this Data33.
        :type: str
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")

        self._manufacturer = manufacturer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data33):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
