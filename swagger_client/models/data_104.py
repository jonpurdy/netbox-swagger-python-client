# coding: utf-8

"""
    NetBox API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data104(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'description': 'str',
        'nat_inside': 'str',
        'custom_fields': 'str',
        'vrf': 'str',
        'address': 'str',
        'interface': 'str',
        'tenant': 'str'
    }

    attribute_map = {
        'status': 'status',
        'description': 'description',
        'nat_inside': 'nat_inside',
        'custom_fields': 'custom_fields',
        'vrf': 'vrf',
        'address': 'address',
        'interface': 'interface',
        'tenant': 'tenant'
    }

    def __init__(self, status=None, description=None, nat_inside=None, custom_fields=None, vrf=None, address=None, interface=None, tenant=None):
        """
        Data104 - a model defined in Swagger
        """

        self._status = None
        self._description = None
        self._nat_inside = None
        self._custom_fields = None
        self._vrf = None
        self._address = None
        self._interface = None
        self._tenant = None

        if status is not None:
          self.status = status
        if description is not None:
          self.description = description
        if nat_inside is not None:
          self.nat_inside = nat_inside
        if custom_fields is not None:
          self.custom_fields = custom_fields
        if vrf is not None:
          self.vrf = vrf
        if address is not None:
          self.address = address
        if interface is not None:
          self.interface = interface
        if tenant is not None:
          self.tenant = tenant

    @property
    def status(self):
        """
        Gets the status of this Data104.
        

        :return: The status of this Data104.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Data104.
        

        :param status: The status of this Data104.
        :type: str
        """

        self._status = status

    @property
    def description(self):
        """
        Gets the description of this Data104.
        

        :return: The description of this Data104.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Data104.
        

        :param description: The description of this Data104.
        :type: str
        """

        self._description = description

    @property
    def nat_inside(self):
        """
        Gets the nat_inside of this Data104.
        The IP for which this address is the \"outside\" IP

        :return: The nat_inside of this Data104.
        :rtype: str
        """
        return self._nat_inside

    @nat_inside.setter
    def nat_inside(self, nat_inside):
        """
        Sets the nat_inside of this Data104.
        The IP for which this address is the \"outside\" IP

        :param nat_inside: The nat_inside of this Data104.
        :type: str
        """

        self._nat_inside = nat_inside

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Data104.
        

        :return: The custom_fields of this Data104.
        :rtype: str
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Data104.
        

        :param custom_fields: The custom_fields of this Data104.
        :type: str
        """

        self._custom_fields = custom_fields

    @property
    def vrf(self):
        """
        Gets the vrf of this Data104.
        

        :return: The vrf of this Data104.
        :rtype: str
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """
        Sets the vrf of this Data104.
        

        :param vrf: The vrf of this Data104.
        :type: str
        """

        self._vrf = vrf

    @property
    def address(self):
        """
        Gets the address of this Data104.
        IPv4 or IPv6 address (with mask)

        :return: The address of this Data104.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this Data104.
        IPv4 or IPv6 address (with mask)

        :param address: The address of this Data104.
        :type: str
        """

        self._address = address

    @property
    def interface(self):
        """
        Gets the interface of this Data104.
        

        :return: The interface of this Data104.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """
        Sets the interface of this Data104.
        

        :param interface: The interface of this Data104.
        :type: str
        """

        self._interface = interface

    @property
    def tenant(self):
        """
        Gets the tenant of this Data104.
        

        :return: The tenant of this Data104.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this Data104.
        

        :param tenant: The tenant of this Data104.
        :type: str
        """

        self._tenant = tenant

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data104):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
