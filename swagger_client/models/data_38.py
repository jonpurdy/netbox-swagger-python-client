# coding: utf-8

"""
    NetBox API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data38(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'custom_fields': 'str',
        'device_role': 'str',
        'name': 'str',
        'site': 'str',
        'comments': 'str',
        'face': 'str',
        'asset_tag': 'str',
        'platform': 'str',
        'primary_ip4': 'str',
        'device_type': 'str',
        'primary_ip6': 'str',
        'position': 'int',
        'serial': 'str',
        'rack': 'str',
        'tenant': 'str'
    }

    attribute_map = {
        'status': 'status',
        'custom_fields': 'custom_fields',
        'device_role': 'device_role',
        'name': 'name',
        'site': 'site',
        'comments': 'comments',
        'face': 'face',
        'asset_tag': 'asset_tag',
        'platform': 'platform',
        'primary_ip4': 'primary_ip4',
        'device_type': 'device_type',
        'primary_ip6': 'primary_ip6',
        'position': 'position',
        'serial': 'serial',
        'rack': 'rack',
        'tenant': 'tenant'
    }

    def __init__(self, status=None, custom_fields=None, device_role=None, name=None, site=None, comments=None, face=None, asset_tag=None, platform=None, primary_ip4=None, device_type=None, primary_ip6=None, position=None, serial=None, rack=None, tenant=None):
        """
        Data38 - a model defined in Swagger
        """

        self._status = None
        self._custom_fields = None
        self._device_role = None
        self._name = None
        self._site = None
        self._comments = None
        self._face = None
        self._asset_tag = None
        self._platform = None
        self._primary_ip4 = None
        self._device_type = None
        self._primary_ip6 = None
        self._position = None
        self._serial = None
        self._rack = None
        self._tenant = None

        if status is not None:
          self.status = status
        if custom_fields is not None:
          self.custom_fields = custom_fields
        if device_role is not None:
          self.device_role = device_role
        if name is not None:
          self.name = name
        if site is not None:
          self.site = site
        if comments is not None:
          self.comments = comments
        if face is not None:
          self.face = face
        if asset_tag is not None:
          self.asset_tag = asset_tag
        if platform is not None:
          self.platform = platform
        if primary_ip4 is not None:
          self.primary_ip4 = primary_ip4
        if device_type is not None:
          self.device_type = device_type
        if primary_ip6 is not None:
          self.primary_ip6 = primary_ip6
        if position is not None:
          self.position = position
        if serial is not None:
          self.serial = serial
        if rack is not None:
          self.rack = rack
        if tenant is not None:
          self.tenant = tenant

    @property
    def status(self):
        """
        Gets the status of this Data38.
        

        :return: The status of this Data38.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Data38.
        

        :param status: The status of this Data38.
        :type: str
        """

        self._status = status

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Data38.
        

        :return: The custom_fields of this Data38.
        :rtype: str
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Data38.
        

        :param custom_fields: The custom_fields of this Data38.
        :type: str
        """

        self._custom_fields = custom_fields

    @property
    def device_role(self):
        """
        Gets the device_role of this Data38.
        

        :return: The device_role of this Data38.
        :rtype: str
        """
        return self._device_role

    @device_role.setter
    def device_role(self, device_role):
        """
        Sets the device_role of this Data38.
        

        :param device_role: The device_role of this Data38.
        :type: str
        """

        self._device_role = device_role

    @property
    def name(self):
        """
        Gets the name of this Data38.
        

        :return: The name of this Data38.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Data38.
        

        :param name: The name of this Data38.
        :type: str
        """

        self._name = name

    @property
    def site(self):
        """
        Gets the site of this Data38.
        

        :return: The site of this Data38.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """
        Sets the site of this Data38.
        

        :param site: The site of this Data38.
        :type: str
        """

        self._site = site

    @property
    def comments(self):
        """
        Gets the comments of this Data38.
        

        :return: The comments of this Data38.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this Data38.
        

        :param comments: The comments of this Data38.
        :type: str
        """

        self._comments = comments

    @property
    def face(self):
        """
        Gets the face of this Data38.
        

        :return: The face of this Data38.
        :rtype: str
        """
        return self._face

    @face.setter
    def face(self, face):
        """
        Sets the face of this Data38.
        

        :param face: The face of this Data38.
        :type: str
        """

        self._face = face

    @property
    def asset_tag(self):
        """
        Gets the asset_tag of this Data38.
        A unique tag used to identify this device

        :return: The asset_tag of this Data38.
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """
        Sets the asset_tag of this Data38.
        A unique tag used to identify this device

        :param asset_tag: The asset_tag of this Data38.
        :type: str
        """

        self._asset_tag = asset_tag

    @property
    def platform(self):
        """
        Gets the platform of this Data38.
        

        :return: The platform of this Data38.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """
        Sets the platform of this Data38.
        

        :param platform: The platform of this Data38.
        :type: str
        """

        self._platform = platform

    @property
    def primary_ip4(self):
        """
        Gets the primary_ip4 of this Data38.
        

        :return: The primary_ip4 of this Data38.
        :rtype: str
        """
        return self._primary_ip4

    @primary_ip4.setter
    def primary_ip4(self, primary_ip4):
        """
        Sets the primary_ip4 of this Data38.
        

        :param primary_ip4: The primary_ip4 of this Data38.
        :type: str
        """

        self._primary_ip4 = primary_ip4

    @property
    def device_type(self):
        """
        Gets the device_type of this Data38.
        

        :return: The device_type of this Data38.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """
        Sets the device_type of this Data38.
        

        :param device_type: The device_type of this Data38.
        :type: str
        """

        self._device_type = device_type

    @property
    def primary_ip6(self):
        """
        Gets the primary_ip6 of this Data38.
        

        :return: The primary_ip6 of this Data38.
        :rtype: str
        """
        return self._primary_ip6

    @primary_ip6.setter
    def primary_ip6(self, primary_ip6):
        """
        Sets the primary_ip6 of this Data38.
        

        :param primary_ip6: The primary_ip6 of this Data38.
        :type: str
        """

        self._primary_ip6 = primary_ip6

    @property
    def position(self):
        """
        Gets the position of this Data38.
        The lowest-numbered unit occupied by the device

        :return: The position of this Data38.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this Data38.
        The lowest-numbered unit occupied by the device

        :param position: The position of this Data38.
        :type: int
        """

        self._position = position

    @property
    def serial(self):
        """
        Gets the serial of this Data38.
        

        :return: The serial of this Data38.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this Data38.
        

        :param serial: The serial of this Data38.
        :type: str
        """

        self._serial = serial

    @property
    def rack(self):
        """
        Gets the rack of this Data38.
        

        :return: The rack of this Data38.
        :rtype: str
        """
        return self._rack

    @rack.setter
    def rack(self, rack):
        """
        Sets the rack of this Data38.
        

        :param rack: The rack of this Data38.
        :type: str
        """

        self._rack = rack

    @property
    def tenant(self):
        """
        Gets the tenant of this Data38.
        

        :return: The tenant of this Data38.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this Data38.
        

        :param tenant: The tenant of this Data38.
        :type: str
        """

        self._tenant = tenant

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data38):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
