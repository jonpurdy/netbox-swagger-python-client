# coding: utf-8

"""
    NetBox API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data100(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_added': 'str',
        'prefix': 'str',
        'rir': 'str',
        'description': 'str',
        'custom_fields': 'str'
    }

    attribute_map = {
        'date_added': 'date_added',
        'prefix': 'prefix',
        'rir': 'rir',
        'description': 'description',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, date_added=None, prefix=None, rir=None, description=None, custom_fields=None):
        """
        Data100 - a model defined in Swagger
        """

        self._date_added = None
        self._prefix = None
        self._rir = None
        self._description = None
        self._custom_fields = None

        if date_added is not None:
          self.date_added = date_added
        self.prefix = prefix
        self.rir = rir
        if description is not None:
          self.description = description
        if custom_fields is not None:
          self.custom_fields = custom_fields

    @property
    def date_added(self):
        """
        Gets the date_added of this Data100.
        

        :return: The date_added of this Data100.
        :rtype: str
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """
        Sets the date_added of this Data100.
        

        :param date_added: The date_added of this Data100.
        :type: str
        """

        self._date_added = date_added

    @property
    def prefix(self):
        """
        Gets the prefix of this Data100.
        

        :return: The prefix of this Data100.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this Data100.
        

        :param prefix: The prefix of this Data100.
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix

    @property
    def rir(self):
        """
        Gets the rir of this Data100.
        

        :return: The rir of this Data100.
        :rtype: str
        """
        return self._rir

    @rir.setter
    def rir(self, rir):
        """
        Sets the rir of this Data100.
        

        :param rir: The rir of this Data100.
        :type: str
        """
        if rir is None:
            raise ValueError("Invalid value for `rir`, must not be `None`")

        self._rir = rir

    @property
    def description(self):
        """
        Gets the description of this Data100.
        

        :return: The description of this Data100.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Data100.
        

        :param description: The description of this Data100.
        :type: str
        """

        self._description = description

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Data100.
        

        :return: The custom_fields of this Data100.
        :rtype: str
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Data100.
        

        :param custom_fields: The custom_fields of this Data100.
        :type: str
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data100):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
